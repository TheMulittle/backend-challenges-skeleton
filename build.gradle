plugins {
	id "com.graphql_java_generator.graphql-gradle-plugin" version "${graphQLPluginVersion}"
	id 'java'
}

wrapper {
    gradleVersion = '8.0.1'
}

group 'com.mulittle.skeleton.backend'
version '2.1-SNAPSHOT'

project.ext {
    lombokVersion = '1.18.20'
    jacksonVersion = '2.13.4'
    springVersion = '5.3.23'
    nettyVersion = '1.0.23'
    jsonpathVersion = '2.7.0'
    junitVersion = '5.9.1'
    cucumberVersion = '7.8.0'
    slf4jVersion = '2.0.2'
}

java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(16))
  }
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"

    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"

    implementation platform('org.springframework.boot:spring-boot-dependencies:2.7.4')
    
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}

    implementation 'org.springframework.boot:spring-boot-starter-test:2.7.4'
    implementation 'org.springframework.boot:spring-boot-starter-webflux:2.7.4'
    implementation "io.projectreactor.netty:reactor-netty-http:${nettyVersion}"
    implementation "com.jayway.jsonpath:json-path:${jsonpathVersion}"
    
    testImplementation platform("org.junit:junit-bom:${junitVersion}")
    implementation platform("io.cucumber:cucumber-bom:${cucumberVersion}")

    implementation "io.cucumber:cucumber-java"
    implementation "io.cucumber:cucumber-junit-platform-engine"
    implementation 'io.cucumber:cucumber-spring'

    testImplementation "org.junit.platform:junit-platform-suite"
    testImplementation "org.junit.jupiter:junit-jupiter"

    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    testImplementation "org.slf4j:slf4j-simple:${slf4jVersion}"

    implementation 'com.aventstack:extentreports:5.0.9'
    
    testImplementation 'org.mockito:mockito-core:4.10.0'
    testImplementation 'org.mockito:mockito-inline:4.10.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.10.0'
    testImplementation 'org.assertj:assertj-core:3.24.1'

    implementation "com.graphql-java-generator:graphql-java-client-runtime:${graphQLPluginVersion}"
    implementation 'com.graphql-java:graphql-java-extended-scalars:20.0'
}

repositories {
    mavenLocal()
    mavenCentral()
}

tasks.withType(Test) {
    useJUnitPlatform()
    // Work around. Gradle does not include enough information to disambiguate
    // between different examples and scenarios.
    systemProperty "cucumber.junit-platform.naming-strategy", "long"
    systemProperty "baseUrl", System.getProperty("BASE_URL") ?: "http://localhost:8001/v1"
    systemProperty "testExecution", System.getProperty("testExecution")
    systemProperty "xRayId", System.getProperty("xRayId")
    systemProperty "xRaySecret", System.getProperty("xRaySecret")
    systemProperty "xRayBaseUrl", System.getProperty("xRayBaseUrl")
    systemProperty "org.freemarker.loggerLibrary", "none"
    testLogging {
        showStandardStreams = true
    }
}

task ut(type: Test) {
   include '**/UnitTestSuite.class'  
}

task wip(type: Test) {
   include '**/RunWipTests.class'  
}

task it(type: Test) {
   include '**/RunCucumberTest.class'  
}

sourceSets {
  main {
    java {
      srcDir '/build/generated/sources/graphqlGradlePlugin'
    }
  }
}

generateClientCodeConf {
	packageName = 'com.graphql.generated'
	customScalars = [ [
			graphQLTypeName: "JSON",
            javaType: "graphql.scalars.object.JsonScalar",
            graphQLScalarTypeStaticField: "graphql.scalars.ExtendedScalars.Json"
	] ]

	copyRuntimeSources = true
	generateDeprecatedRequestResponse = false
	separateUtilityClasses = true
}